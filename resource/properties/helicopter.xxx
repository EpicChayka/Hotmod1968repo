;SDL
actor

(include "vehicle.ext")
(include "armor.ext")

{lodclass "vehicle"}

{Collider "helicopter"}
;{PatherID "helicopter"}

{targetClass "airborne"}
{targetSelector "airborne_bullet"}

{Props "helicopter" "vision_lev01_air"}

{brain "vehicle" {state "airborne"}}

{simulatorId "airborne"}

{sensor
	{Visor "main"
		{vision "airborne_main"}
		{bone "visor"}
	}
	{visor "around"
		{vision "airborne_around"}
		{bone "basis"}
	}
}

{placer
	{place "driver"		{group "driver"}	{visor "main"}}
	{place "commander"	{group "driver"}	{visor "main"}}
}

{Extender "inventory"
	{box
		{Size 8 6}
		{weight 20000}
	}
}

{Volume "body"
	{tags "body"}
	{thickness 20}
	{able {visible 0}}
}
{Volume "engine"
	{tags "body" "inflammable"}
	{thickness 20}
	{able {visible 1}}
}
{Volume "cabin"
	{tags "body"}
	{thickness hollow 10}
	{able {visible 0}}
}

{Component "body"
	{RepairTime 25}
	{RepairOrder 0}
}
{Component "engine"
	{RepairTime 25}
	{RepairOrder 3}
}

;main rotor components
{Component "rotor"
	{RepairTime 10}
	{RepairOrder 4}
}

;back rotor components
{Component "rotor_b"
	{RepairTime 10}
	{RepairOrder 4}
}

{perks
	{component "body"
		{category "airborne_medium"}
	}
	{component "engine"
		{category "engine_medium"}
	}
	{blastwave_modifier 20.0}
}

{Chassis "wheel"
	{Locomotion
		{MaxSpeed		90	}	; max speed, km/h
		{StartTime		9	}	; acceleration time from 0 to max. speed, seconds
		{BrakeTime		5	}	; deceleration time from max. speed to 0, seconds
		{StopTime		3	}	; stop time after turning off the engine, seconds
	}
	{DontUseSlope}
}
{Chassis "helicopter"
	{FrontSlopeSpeed		10	} ; degree/s
	{MaxFrontSlope			15	} ; degree
	{SideSlopeSpeed			15	} ; degree/s
	{MaxSideSlope			15	} ; degree
	{MaxElevationSpeed		10	} ; m/s
	{ElevationAcceleration	5	} ; m/s^2
	{MaxAltitude			50	} ; m
	{TravelAltitude			22	} ; m minimum altitude above ground, moving is dynamic
	{EngineStartupTime		3.6 } ; seconds
	{DontUseSlope}
	{Airborne}
	{IgnorePatherBoundsAI}		; AI ignores pather bounds, USER is constrained by pather bounds
	{FuelBag
		{volume 1000}
		{rate   10 	}		; * 20 liter/km
		{remain 1000}
		{fuel "fuel"}
	}
}
{ChassisManager
	{Current "helicopter"}
}

(define "locomotion_transport"
	{StartTime		3	}	; acceleration time from 0 to max. speed, seconds
	{BrakeTime		0.8	}	; deceleration time from max. speed, seconds - higher values than 1 can lead to helicopters not being able to stop before collision with an obstacle
	{StopTime		4	}	; stop time after turning off the engine from max. speed to 0, seconds but less
	{SplineRadius	5	}	; limit turning radius on the splines, meters
	{Slow			30	}	; km/h
	{Normal			60	}
	{Fast			90	}
	{MaxSpeed		90	}	; max speed, km/h
	{TurnRadius		15	}	; turn radius, m
)

(define "locomotion_attack"
	{StartTime		2	} ; acceleration time from 0 to max. speed, seconds
	{BrakeTime		0.8	} ; deceleration time from max. speed, seconds - higher values than 1 can lead to helicopters not being able to stop before collision with an obstacle
	{StopTime		3	} ; stop time after turning off the engine from max. speed to 0, seconds but less
	{SplineRadius	5	} ; limit turning radius on the splines, meters
	{Slow			50	} ; km/h
	{Normal			70	}
	{Fast			100	}
	{MaxSpeed		100	} ; max speed, km/h
	{TurnRadius		15	} ; turn radius, m
)

(define "part"
	{volume %0					;adress volume named %0
		{tags %0 "part"}		;give it a tag of its name and "part"
		{component %0}			;assign component of name %0 (in case it existed)
		{thickness 0.5}
		{able {visible 0}}
	}
	{component %0}				;create component with name %0
)

(define "armor_helicopter"
	{armor
		{setting "body"
			{volumes "body*"}
			{threshold
				{blast 	{value 4}}
				{pierce {value 4}}
			}
		}
		{setting "engine"
			{volumes "engine*"}
			{whole_wound}
			{threshold
				{blast 	{value 4}}
				{pierce {value 4}}
			}
		}
		{setting "wheel"
			{volumes "wheel*"}
			{thickness 5}
			{whole_wound}
			{threshold
				{blast 	{value 4}}
				{pierce {value 4}}
			}
		}
	}
)

(define "window_volume"
	{volume "%name"
		{thickness %thickness}
		{able {window}}
	}
)

(define "armor_medium"
	("armor_helicopter")
)
